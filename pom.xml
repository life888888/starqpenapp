<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.life888888.lab</groupId>
	<artifactId>starq-pen-app</artifactId>
	<!-- 警告 不要設定 x.x.x 以外的格式 , 如 SNAPSHOT -->
	<!-- 因為 下方的 jpackage 會使用到這個設定 Windows 只接受 0.0.1 的格式 -->
	<version>0.0.1</version>
	<name>StarQ Pen Rec Sticker App</name>
	<description>StarQ 點讀筆 【自己動手做錄放音貼紙】MP3轉檔工具</description>
	<properties>
		<maven.compiler.target>17</maven.compiler.target>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<vendor.name.zh>明日工作室</vendor.name.zh>
		<vendor.name.en>tomor</vendor.name.en>
		<app.releaseVersion>1</app.releaseVersion>
	</properties>
	<licenses>
		<license>
			<name>GNU General Public License</name>
			<url>http://www.gnu.org/licenses/gpl.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<build>
		<finalName>starq-pen-app</finalName>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>2.0.0</version>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<compilerArgs>
						<arg>-Xlint:all</arg>
						<!--<arg>-verbose</arg> -->
						<!--<arg>-Xlint:all,-options,-path</arg> -->
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.2</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>com.life888888.lab.StarQPenRecStickerApp</mainClass>
						</manifest>
						<manifestEntries>
							<built-by />
							<!-- add empty for not add user name -->
							<Class-Path>.</Class-Path>
							<App-Version>${project.version}</App-Version>
						</manifestEntries>
					</archive>
					<excludes>
						<exclude>**/jpackage-files/**</exclude>
						<exclude>**/images/**</exclude>


					</excludes>
				</configuration>
			</plugin>
			<!-- 沒有要用它打包 , 只是讓它產生 相關 jar 出來放 , 給後面的 jpackage 打包使用 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<version>2.1.0</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>assemble</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<programs>
						<program>
							<mainClass>com.life888888.lab.StarQPenRecStickerApp</mainClass>
							<id>starqpenapp</id>
						</program>
					</programs>
					<extraJvmArguments>
						-Duser.language=en
						-Duser.country=US
						-Dfile.encoding=UTF-8
						-Xms128M
						-Xmx756M
					</extraJvmArguments>
					<repositoryLayout>flat</repositoryLayout>
					<useWildcardClassPath>true</useWildcardClassPath>
					<binFileExtensions>
						<!--<unix>.sh</unix> -->
					</binFileExtensions>
					<repositoryName>lib</repositoryName>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/appassembler/lib/images</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/main/resources/images</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-license</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/appassembler/lib</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}</directory>
									<filtering>true</filtering>
									<includes>      <!--Only those files will be included -->
										<include>LICENSE</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-jpackages</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/jpackage-files</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/main/resources/jpackage-files</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- HOW TO EXECUTE -->
			<!-- build Linux deb -->
			<!-- mvn clean package exec:exec@jpackage-linux-deb -->
			<!-- mvn -X clean package exec:exec@jpackage-linux-deb -->
			<!-- build Linux rpm -->
			<!-- mvn clean package exec:exec@jpackage-linux-rpm -->
			<!-- mvn -X clean package exec:exec@jpackage-linux-rpm -->
			<!-- build Windows msi -->
			<!-- mvn clean package exec:exec@jpackage-windows-msi -->
			<!-- mvn -X clean package exec:exec@jpackage-windows-msi -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>3.0.0</version>
				<executions>

					<execution>
						<id>jpackage-linux-deb</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>jpackage</executable>
							<arguments>
								<argument>@${project.build.directory}/jpackage-files/starq-pen-app.app.jpackage.settings</argument>
								<argument>@${project.build.directory}/jpackage-files/starq-pen-app.linux.jpackage.settings</argument>

								<argument>--main-jar</argument>
								<argument>${project.artifactId}-${project.version}.jar</argument>

								<argument>--description</argument>
								<argument>"StarQ 點讀筆 【自己動手做錄放音貼紙】MP3轉檔工具"</argument>
								<argument>--vendor</argument>
								<argument>"${vendor.name.zh}"</argument>
								<argument>--linux-app-release</argument>
								<argument>${app.releaseVersion}</argument>
								<argument>--app-version</argument>
								<argument>${project.version}</argument>
								<argument>--add-modules</argument>
								<argument>java.base,java.desktop</argument>
							</arguments>
							<workingDirectory>${project.build.directory}</workingDirectory>
						</configuration>
					</execution>
					<execution>
						<id>jpackage-linux-rpm</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>jpackage</executable>
							<arguments>
								<argument>@${project.build.directory}/jpackage-files/starq-pen-app.app.jpackage.settings</argument>
								<argument>@${project.build.directory}/jpackage-files/starq-pen-app.linux.jpackage.settings</argument>

								<argument>--main-jar</argument>
								<argument>${project.artifactId}-${project.version}.jar</argument>
								<argument>--description</argument>
								<argument>"StarQ Pen DIY Record Sticker MP3 App"</argument>
								<argument>--vendor</argument>
								<argument>"${vendor.name.en}"</argument>
								<argument>--linux-app-release</argument>
								<argument>${app.releaseVersion}</argument>
								<argument>--app-version</argument>
								<argument>${project.version}</argument>
								<argument>--add-modules</argument>
								<argument>java.base,java.desktop</argument>
							</arguments>
							<workingDirectory>${project.build.directory}</workingDirectory>
						</configuration>
					</execution>
					<execution>
						<id>jpackage-windows-msi</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>jpackage</executable>
							<arguments>
								<argument>@${project.build.directory}/jpackage-files/starq-pen-app.app.jpackage.settings</argument>
								<argument>@${project.build.directory}/jpackage-files/starq-pen-app.windows.jpackage.settings</argument>
								<argument>--main-jar</argument>
								<argument>${project.artifactId}-${project.version}.jar</argument>
								<argument>--description</argument>
								<argument>"StarQ Pen DIY Record Sticker MP3 App"</argument>
								<argument>--vendor</argument>
								<argument>"${vendor.name.en}"</argument>
								<argument>--app-version</argument>
								<argument>${project.version}</argument>
								<argument>--add-modules</argument>
								<argument>java.base,java.desktop</argument>
							</arguments>
							<workingDirectory>${project.build.directory}</workingDirectory>
						</configuration>
					</execution>
					<!-- TODO ADD For Mac x86_64 -->
					<!-- TODO ADD For RsaspberryPi Arm -->
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>${swt.groupId}</groupId>
			<artifactId>${swt.artifactId}</artifactId>
			<version>${swt.version}</version>
		</dependency>
		<dependency>
			<groupId>javazoom</groupId>
			<artifactId>jlayer</artifactId>
			<version>1.0.1</version>
		</dependency>
	</dependencies>
	<profiles>
		<!-- 先單獨做一次 mvn help:system 因為要下載 maven 相依件 mvn help:system | grep "os\." 
			os.name=Linux os.version=5.8.0-1024-raspi os.arch=aarch64 Ubuntu 20.04 20220508 
			os.name=Linux os.version=5.13.0-40-generic os.arch=amd64 mvn help:system 
			| findstr "os\." os.name=Windows 10 os.version=10.0 os.arch=amd64 就是下面的 os 
			name arch -->
		<profile>
			<id>linux</id>
			<activation>
				<os>
					<name>Linux</name>
					<arch>amd64</arch>
				</os>
			</activation>
			<properties>
				<swt.groupId>org.eclipse.platform</swt.groupId>
				<swt.artifactId>org.eclipse.swt.gtk.linux.x86_64</swt.artifactId>
				<swt.version>3.119.0</swt.version>
				<zname>linux_x86_64</zname>
				<iconType>png</iconType>
				<zformat>tar.gz</zformat>
			</properties>
		</profile>
		<!-- NOT TEST -->
		<!-- <profile> <id>raspberrypi</id> <activation> <os> <name>Linux</name> 
			<arch>aarch64</arch> </os> </activation> <properties> <swt.groupId>org.eclipse.platform</swt.groupId> 
			<swt.artifactId>org.eclipse.swt.gtk.linux.arm64</swt.artifactId> <swt.version>3.119.0</swt.version> 
			<zname>raspberrypi_linux_aarch64</zname> <iconType>png</iconType> <zformat>tar.gz</zformat> 
			</properties> </profile> -->
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<name>Windows 10</name>
					<arch>amd64</arch>
				</os>
			</activation>
			<properties>
				<swt.groupId>org.eclipse.platform</swt.groupId>
				<swt.artifactId>org.eclipse.swt.win32.win32.x86_64</swt.artifactId>
				<swt.version>3.119.0</swt.version>
				<zname>windows_x86_64</zname>
				<iconType>ico</iconType>
				<zformat>zip</zformat>
			</properties>
		</profile>
		<!-- NOT TEST -->
		<profile>
			<id>macosx</id>
			<activation>
				<os>
					<name>macosx</name>
					<arch>x86_64</arch>
				</os>
			</activation>
			<properties>
				<swt.groupId>org.eclipse.platform</swt.groupId>
				<swt.artifactId>org.eclipse.swt.cocoa.macosx.x86_64</swt.artifactId>
				<swt.version>3.119.0</swt.version>
				<zname>macosx_x86_64</zname>
				<iconType>png</iconType>
				<zformat>tgz</zformat>
			</properties>
		</profile>
	</profiles>
	<repositories>
		<!-- add for swt -->
		<repository>
			<id>repo1</id>
			<name>repo1</name>
			<url>https://repo1.maven.org/maven2</url>
		</repository>
	</repositories>
</project>
